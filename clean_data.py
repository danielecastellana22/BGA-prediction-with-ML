# Libraries
import os.path as osp
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from argparse import ArgumentParser


def main(parsed_data, output_data_dir):
    df = pd.read_pickle(parsed_data)

    # We keep the columns with lesser than 3.5% of missing values.
    df = df.drop(columns=df.columns[df.columns.str.contains('unnamed', case=False, na=True)])

    # Remove the "Horn of Africa"
    df = df.drop(df[df['Detailed-continental Region'] == "horn-of-africa"].index)

    col_nan = df.isna().sum(axis=0)/df.shape[0]
    col_to_remove = col_nan[col_nan > 0.035].index
    df = df.drop(columns=col_to_remove)
    # Encoding delle etichette
    leG = LabelEncoder()
    df['Inter-continental Region'].map(lambda x: x.split('.')[0], inplace=True)
    cols_to_drop = ['ID', 'Inter-continental Region', 'Detailed-continental Region']
    X = df[list(set(df.columns).difference(cols_to_drop))].to_numpy(na_value=-1, dtype=np.int32)
    X_cont = df[list(set(df.columns).difference(cols_to_drop))].to_numpy(na_value=-1, dtype=np.int32)

    y = leG.fit_transform(df['Detailed-continental Region'].to_numpy())
    y_with_more_than_one = np.bincount(y) > 1
    row_to_retain = y_with_more_than_one[y]
    y = y[row_to_retain]
    X = X[row_to_retain]

    np.save(osp.join(output_data_dir, 'detailed-continental', 'X.npy'), X)
    np.save(osp.join(output_data_dir, 'detailed-continental', 'y.npy'), y)

    y_cont = leG.fit_transform(df['Inter-continental Region'].to_numpy())
    y_with_more_than_one_cont = np.bincount(y_cont) > 1
    row_to_retain_cont = y_with_more_than_one_cont[y_cont]
    y_cont = y_cont[row_to_retain_cont]
    X_cont = X_cont[row_to_retain_cont]

    np.save(osp.join(output_data_dir, 'inter-continental', 'X.npy'), X_cont)
    np.save(osp.join(output_data_dir, 'inter-continental', 'y.npy'), y_cont)



if __name__ == '__main__':
    argparser = ArgumentParser()
    argparser.add_argument('parsed_data', type=str,
                           help='Path to the .pkl file generated by parse_data.py')
    argparser.add_argument('output_data_dir', type=str, help='Path to the output directory.')
    args = argparser.parse_args()
    main(args.parsed_data, args.output_data_dir)


